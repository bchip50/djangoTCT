# Generated by Django 3.0.6 on 2020-05-07 04:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import phone_field.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Archivable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archive', models.BooleanField(choices=[(False, 'Active'), (True, 'Archived')], default=False)),
                ('archived', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter short title for this Session or Course.', max_length=120)),
                ('description', models.TextField(help_text='Enter description of the session or course with goals and level of expertise recommended.')),
                ('level', models.CharField(blank=True, max_length=40, null=True)),
                ('cost', models.CharField(default='Free', max_length=60)),
                ('course_icon', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Course Icon')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street1', models.CharField(max_length=100)),
                ('street2', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(default='TX', help_text='Enter two character state code', max_length=2)),
                ('zipcode', models.CharField(max_length=12)),
                ('lat', models.FloatField(blank=True, null=True)),
                ('lon', models.FloatField(blank=True, null=True)),
                ('name', models.CharField(help_text='Name of the location.', max_length=100)),
                ('contact', models.CharField(blank=True, help_text='Name of the primary contact for the location.', max_length=100, null=True)),
                ('phone', phone_field.models.PhoneField(blank=True, help_text='Phone number for the primary contact for the location.', max_length=31, null=True)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Location description.')),
                ('weblink', models.URLField(blank=True, null=True, verbose_name='Web site for the location')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.IntegerField(choices=[(0, 'Member'), (1, 'Leader')], null=True)),
                ('biography', models.TextField(blank=True, null=True, verbose_name='Biography')),
                ('phone', phone_field.models.PhoneField(blank=True, help_text='Primary Phone Number.', max_length=31, null=True)),
                ('cell_phone', phone_field.models.PhoneField(blank=True, help_text='Cell Phone Number for texts.', max_length=31, null=True)),
                ('birthdate', models.DateField(blank=True, help_text='Enter your birth date.', null=True)),
                ('city', models.CharField(blank=True, help_text='City where you live.', max_length=20, null=True)),
                ('state', models.CharField(blank=True, help_text='State where you live.', max_length=20, null=True)),
                ('zipcode', models.CharField(blank=True, help_text='Zipcode where you live.', max_length=10, null=True)),
                ('gmail', models.EmailField(help_text='GMail address used to authenticate to YouTube.', max_length=80)),
                ('Lineage', models.TextField(blank=True, help_text='Describe the lineage of your style. Who was your teacher.', max_length=1200, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True)),
                ('modified', models.DateField(auto_now=True)),
                ('title', models.CharField(max_length=80)),
                ('caption', models.CharField(max_length=120)),
                ('weblink', models.URLField(help_text='Enter link to the resource home page.')),
                ('description', models.TextField(help_text='Describe the resource.')),
                ('email_icon', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Icon for email.')),
                ('resource_type', models.CharField(choices=[('book', 'Book'), ('store', 'Store'), ('website', 'Web Site'), ('video', 'Video from YouTube'), ('photos', 'Photo Collection'), ('tourney', 'Tournament or Conference')], max_length=10)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='tctsite.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='Style',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter short title for the TaiChi Style.', max_length=80)),
                ('history', models.TextField(help_text='Short history of the style.')),
                ('wiki', models.URLField(blank=True, help_text='Link to the wiki article for the style.', null=True)),
                ('style_icon', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Style Icon')),
            ],
        ),
        migrations.CreateModel(
            name='StyleCourses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BinaryField(default=True)),
                ('started', models.DateField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='style_course', to='tctsite.Course')),
                ('style', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_style', to='tctsite.Style')),
            ],
        ),
        migrations.AddField(
            model_name='style',
            name='courses',
            field=models.ManyToManyField(blank=True, through='tctsite.StyleCourses', to='tctsite.Course'),
        ),
        migrations.AddField(
            model_name='style',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='style_owner', to='tctsite.Profile'),
        ),
        migrations.AddField(
            model_name='style',
            name='resources',
            field=models.ManyToManyField(blank=True, to='tctsite.Resource'),
        ),
        migrations.AddField(
            model_name='profile',
            name='preferred_style',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tctsite.Style'),
        ),
        migrations.AddField(
            model_name='profile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True)),
                ('modified', models.DateField(auto_now=True)),
                ('current', models.BooleanField(default=False, verbose_name='Current Message')),
                ('title', models.CharField(help_text='Heading for the email.', max_length=80)),
                ('body', models.TextField(verbose_name='EMail body.')),
                ('celltext', models.CharField(max_length=100)),
                ('email_icon', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Icon for email.')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tctsite.Course')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='tctsite.Profile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('starts', models.TimeField(verbose_name='Starting Time.')),
                ('duration', models.DurationField(verbose_name='How long does each session last?')),
                ('rrulestr', models.TextField(help_text="\n<a href='https://dateutil.readthedocs.io/en/stable/rrule.html#rrulestr-examples'> \nRRuleSet Documentation </a>\n", verbose_name='Recurrence Rules Set')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tctsite.Course')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tctsite.Location')),
            ],
        ),
        migrations.AddField(
            model_name='location',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tctsite.Profile'),
        ),
        migrations.CreateModel(
            name='Leadership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.BinaryField(default=False)),
                ('active', models.BinaryField(default=True)),
                ('started', models.DateField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaders_course', to='tctsite.Course')),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_leader', to='tctsite.Profile')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='leaders',
            field=models.ManyToManyField(blank=True, through='tctsite.Leadership', to='tctsite.Profile'),
        ),
        migrations.AddField(
            model_name='course',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='course_owner', to='tctsite.Profile'),
        ),
        migrations.AddField(
            model_name='course',
            name='resources',
            field=models.ManyToManyField(blank=True, to='tctsite.Resource'),
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('archivable_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tctsite.Archivable')),
                ('created', models.DateField(auto_now_add=True)),
                ('modified', models.DateField(auto_now=True)),
                ('title', models.CharField(max_length=100)),
                ('body', models.TextField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to='tctsite.Profile')),
            ],
            options={
                'ordering': ('-created',),
            },
            bases=('tctsite.archivable', models.Model),
        ),
    ]
